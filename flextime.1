.TH flextime 1 2023-02-09

.SH NAME
flextime \- a program for tracking working hours

.SH SYNOPSIS

.B flextime
.RI [\| "options" \|]

.SH DESCRIPTION

The Flextime daemon (\fBflextimed\fR) query X11 for the time since the
last user input once every minute and stores the result on disk.  The
flextime program can be used to display the times the user has been
active on the computer.  For example:

    $ \fBflextime\fR
    20200810 07:16:50 — 16:10:22  8:53 | 0:27 w/33 Monday
    20200811 13:29:45 — 14:01:18  0:31 | 0:12 w/33 Tuesday
    20200812 07:33:21 — 17:22:56  9:49 | 6:22 w/33 Wednesday
    20200813 07:54:32 — 15:17:12  7:22 | 3:34 w/33 Thursday
    20200814 07:29:37 — 10:38:36  3:08 | 3:08 w/33 Friday

If your working day starts and ends on the computer, this list
effectively represents your working hours.

Just make sure that the Flextime daemon \fBflextimed\fR(1), is started
every time you log in.

.SH OPTIONS

.TP
.BR \-w ", " \-\-split-week
Print a blank line after each week (ISO 8601 definition of
week). Intended to make it easier for a human to scan the result on a
screen.

.TP
.BI \-d\  minutes \fR,\ \fB\-\-idle= minutes
Set idle limit in minutes, defaults to 10.  The idle limit affects the
calculation of work.  Work is defined as the time when the user is
active on the computer.  As long as a user is idle less than this
limit, that time on the computer is added to the work value.

A user that continuously types on the computer from 9:00 to 17:00,
with breaks shorter than 10 minutes, will get a work value of 8:00
hours.  If she is not active on the computer for more than 10 minutes,
the work value will be smaller than 8:00 hours.

Think of it as "how much time did I actually spend working on the
computer?", compared to "how much time did I spend at work today?".

.TP
.BI \-s\  date \fR,\ \fB\-\-stop= date
Mark date as the last time the user was active at the computer.  The
purpose of the \fB\-\-stop\fR option is to allow the user to ask the
question "what if a stopped working at a specific time?".

The date value is parsed using \fBgetdate\fR(3).  You can separate
multiple values with a semicolon ";".

.TP
.BI \-m\  date \fR,\ \fB\-\-mark= date
Mark date as a time when the user was active at the computer.  The
purpose of the \fB\-\-mark\fR option is to allow the user to ask the
question "what if I was active at a specific time?".  Normally only
useful if you specify a date value that is earlier than the start time
for a specific day.

The date value is parsed using \fBgetdate\fR(3).  You can separate
multiple values with a semicolon ";".

.TP
.B \-\-no-local-data
Do not read data from local files.  Useful for testing purposes,
combined with the \fB\-\-stop\fR and \fB\-\-mark\fR options.

.TP
.B \-\-no-continue-on-error
Do not skip files with parsing errors.  Instead, print an error
message and exit the program.

.TP
.BR \-? ", " \-\-help
Print a help message and exit.

.TP
.B \-\-usage
Print a short usage message and exit.

.TP
.BR \-V ", " \-\-version
Display version information.

.SH EXIT STATUS

.TP
.B 0
Successful program execution.

.TP
.B 1
Measurement data parsing error.

.TP
.B 2
Date parsing error using \fBgetdate\fR(3)

.SH ENVIRONMENT

The argument to the \fB\-\-stop\fR and \fB\-\-mark\fR and options are
parsed using \fBgetdate\fR(3).  This means that you need to set the
DATEMSK environment variable to point to a file with format
specification for parsing.  See \fBgetdate\fR(3) for details.

.SH FILES

All files generated by the daemon are stored in $HOME/.flextime.
See \fBflextimed\fR(1) for details.

.SH EXAMPLES

    $ TFILE=$PWD/tfile
    $ \fBecho\fR '%F %H:%M' >> $TFILE # YYYY-MM-DD HH:MM
    $ \fBexport\fR DATEMSK=$TFILE
    $ \fBflextime\fR --stop "2021-08-25 17:00"

.SH REPORTING BUGS

https://github.com/altenstedt/flextime-x11/issues

.SH SEE ALSO

\fBflextimed\fR(1), \fBgetdate\fR(3)
